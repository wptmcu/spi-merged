
spi_merged.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00804000  00000404  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  00804018  00804018  000004b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cf2  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003116  00000000  00000000  000042a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000794  00000000  00000000  000073b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00007b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000198b  00000000  00000000  00007c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027e  00000000  00000000  00009607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00009885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_56>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e4 e0       	ldi	r30, 0x04	; 4
 108:	f4 e0       	ldi	r31, 0x04	; 4
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a8 31       	cpi	r26, 0x18	; 24
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	22 e4       	ldi	r18, 0x42	; 66
 11c:	a8 e1       	ldi	r26, 0x18	; 24
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ae 31       	cpi	r26, 0x1E	; 30
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
 12e:	0c 94 00 02 	jmp	0x400	; 0x400 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <main>:

int main(void)
{
	
	//Rx Mode
	PORTA.DIR |= PIN2_bm | PIN3_bm;
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	80 81       	ld	r24, Z
 13c:	8c 60       	ori	r24, 0x0C	; 12
 13e:	80 83       	st	Z, r24
	PORTC.DIR |= PIN7_bm;
 140:	c0 e4       	ldi	r28, 0x40	; 64
 142:	d4 e0       	ldi	r29, 0x04	; 4
 144:	88 81       	ld	r24, Y
 146:	80 68       	ori	r24, 0x80	; 128
 148:	88 83       	st	Y, r24
	PORTD.DIR |= PIN4_bm;
 14a:	a0 e6       	ldi	r26, 0x60	; 96
 14c:	b4 e0       	ldi	r27, 0x04	; 4
 14e:	8c 91       	ld	r24, X
 150:	80 61       	ori	r24, 0x10	; 16
 152:	8c 93       	st	X, r24
	
	PORTA.OUTCLR |= PIN2_bm;
 154:	86 81       	ldd	r24, Z+6	; 0x06
 156:	84 60       	ori	r24, 0x04	; 4
 158:	86 83       	std	Z+6, r24	; 0x06
	PORTA.OUTSET |= PIN3_bm;
 15a:	85 81       	ldd	r24, Z+5	; 0x05
 15c:	88 60       	ori	r24, 0x08	; 8
 15e:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR |= PIN7_bm;
 160:	8e 81       	ldd	r24, Y+6	; 0x06
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8e 83       	std	Y+6, r24	; 0x06
	PORTD.OUTCLR |= PIN4_bm;
 166:	16 96       	adiw	r26, 0x06	; 6
 168:	8c 91       	ld	r24, X
 16a:	16 97       	sbiw	r26, 0x06	; 6
 16c:	80 61       	ori	r24, 0x10	; 16
 16e:	16 96       	adiw	r26, 0x06	; 6
 170:	8c 93       	st	X, r24
	
	SPI_init();
 172:	0e 94 1f 01 	call	0x23e	; 0x23e <SPI_init>
	UART_init();
 176:	0e 94 6d 01 	call	0x2da	; 0x2da <UART_init>
	UART_sendString("serial\r\n");
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	90 e4       	ldi	r25, 0x40	; 64
 17e:	0e 94 8c 01 	call	0x318	; 0x318 <UART_sendString>
	sei();
 182:	78 94       	sei
	while (1)
	{
		//_delay_ms(100);
		readADC();
 184:	0e 94 3c 01 	call	0x278	; 0x278 <readADC>
 188:	fd cf       	rjmp	.-6      	; 0x184 <main+0x4e>

0000018a <__vector_56>:
	}	
}

ISR(USART4_RXC_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	0b b6       	in	r0, 0x3b	; 59
 196:	0f 92       	push	r0
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	char data = UART_rx_get_c();
 1b4:	0e 94 aa 01 	call	0x354	; 0x354 <UART_rx_get_c>
	if(uart_read_length < uart_receive_buf_size)
	{
		uart_receive_buf[uart_read_length++] = data;
 1b8:	e0 91 1a 40 	lds	r30, 0x401A	; 0x80401a <uart_read_length>
 1bc:	c1 e0       	ldi	r28, 0x01	; 1
 1be:	ce 0f       	add	r28, r30
 1c0:	c0 93 1a 40 	sts	0x401A, r28	; 0x80401a <uart_read_length>
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	e5 5e       	subi	r30, 0xE5	; 229
 1c8:	ff 4b       	sbci	r31, 0xBF	; 191
 1ca:	80 83       	st	Z, r24
		if (data == '\0')
 1cc:	81 11       	cpse	r24, r1
 1ce:	22 c0       	rjmp	.+68     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
		{
			memcpy(uart_read_data, uart_receive_buf, uart_read_length);
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
 1d2:	ae 01       	movw	r20, r28
 1d4:	6b e1       	ldi	r22, 0x1B	; 27
 1d6:	70 e4       	ldi	r23, 0x40	; 64
 1d8:	8b e1       	ldi	r24, 0x1B	; 27
 1da:	91 e4       	ldi	r25, 0x41	; 65
 1dc:	0e 94 c0 01 	call	0x380	; 0x380 <memcpy>
			memset(uart_receive_buf,0,uart_read_length);
 1e0:	ae 01       	movw	r20, r28
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	8b e1       	ldi	r24, 0x1B	; 27
 1e8:	90 e4       	ldi	r25, 0x40	; 64
 1ea:	0e 94 c9 01 	call	0x392	; 0x392 <memset>
			uart_read_length = 0;
 1ee:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <uart_read_length>
			
			char* read_com = strtok((char*)uart_read_data," ");
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	70 e4       	ldi	r23, 0x40	; 64
 1f6:	8b e1       	ldi	r24, 0x1B	; 27
 1f8:	91 e4       	ldi	r25, 0x41	; 65
 1fa:	0e 94 bc 01 	call	0x378	; 0x378 <strtok>
 1fe:	ec 01       	movw	r28, r24
			char* read_val = strtok(NULL, " ");
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	70 e4       	ldi	r23, 0x40	; 64
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 bc 01 	call	0x378	; 0x378 <strtok>
			
			uart_com_routine(read_com, read_val);
 20c:	bc 01       	movw	r22, r24
 20e:	ce 01       	movw	r24, r28
 210:	0e 94 b1 01 	call	0x362	; 0x362 <uart_com_routine>
		}
	}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <SPI_init>:
uint8_t firstMask = 0b11110000;
uint8_t secondMask = 0b00001111;

void SPI_init()
{
	PORTA.DIR |= PIN4_bm;
 23e:	e0 e0       	ldi	r30, 0x00	; 0
 240:	f4 e0       	ldi	r31, 0x04	; 4
 242:	80 81       	ld	r24, Z
 244:	80 61       	ori	r24, 0x10	; 16
 246:	80 83       	st	Z, r24
	PORTA.DIR &= ~PIN5_bm;
 248:	80 81       	ld	r24, Z
 24a:	8f 7d       	andi	r24, 0xDF	; 223
 24c:	80 83       	st	Z, r24
	PORTA.DIR |= PIN6_bm;
 24e:	80 81       	ld	r24, Z
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 83       	st	Z, r24
	PORTA.DIR |= PIN7_bm;
 254:	80 81       	ld	r24, Z
 256:	80 68       	ori	r24, 0x80	; 128
 258:	80 83       	st	Z, r24
	SPI0.CTRLA |= SPI_MASTER_bm | SPI_ENABLE_bm;
 25a:	e0 e4       	ldi	r30, 0x40	; 64
 25c:	f9 e0       	ldi	r31, 0x09	; 9
 25e:	80 81       	ld	r24, Z
 260:	81 62       	ori	r24, 0x21	; 33
 262:	80 83       	st	Z, r24
	SPI0.CTRLB |= SPI_BUFEN_bm | SPI_MODE1_bm;
 264:	81 81       	ldd	r24, Z+1	; 0x01
 266:	82 68       	ori	r24, 0x82	; 130
 268:	81 83       	std	Z+1, r24	; 0x01
	SPI0.INTCTRL |= SPI_RXCIE_bm | SPI_IE_bm;
 26a:	82 81       	ldd	r24, Z+2	; 0x02
 26c:	81 68       	ori	r24, 0x81	; 129
 26e:	82 83       	std	Z+2, r24	; 0x02
	SPI0.CTRLA &= ~SPI_DORD_bm;
 270:	80 81       	ld	r24, Z
 272:	8f 7b       	andi	r24, 0xBF	; 191
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <readADC>:
	return SPI0.DATA;
}

void readADC(void)
{
	PORTA.OUTCLR = PIN7_bm;
 278:	80 e8       	ldi	r24, 0x80	; 128
 27a:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x7e0406>
	SPI0.CTRLA &= ~SPI_DORD_bm;
}

inline static uint8_t SPI0_SendTxData(uint8_t data)
{
	SPI0.DATA = data;
 27e:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	
	//asm volatile("nop");	
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 282:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 286:	88 23       	and	r24, r24
 288:	e4 f7       	brge	.-8      	; 0x282 <readADC+0xa>
	
	return SPI0.DATA;
 28a:	e0 e4       	ldi	r30, 0x40	; 64
 28c:	f9 e0       	ldi	r31, 0x09	; 9
 28e:	24 81       	ldd	r18, Z+4	; 0x04
}

void readADC(void)
{
	PORTA.OUTCLR = PIN7_bm;
	byte_first = SPI0_SendTxData(0x00);
 290:	20 93 1d 42 	sts	0x421D, r18	; 0x80421d <byte_first>
	SPI0.CTRLA &= ~SPI_DORD_bm;
}

inline static uint8_t SPI0_SendTxData(uint8_t data)
{
	SPI0.DATA = data;
 294:	14 82       	std	Z+4, r1	; 0x04
	
	//asm volatile("nop");	
	while (!(SPI0.INTFLAGS & SPI_IF_bm));
 296:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 29a:	88 23       	and	r24, r24
 29c:	e4 f7       	brge	.-8      	; 0x296 <readADC+0x1e>
	
	return SPI0.DATA;
 29e:	30 91 44 09 	lds	r19, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
void readADC(void)
{
	PORTA.OUTCLR = PIN7_bm;
	byte_first = SPI0_SendTxData(0x00);
	byte_second = SPI0_SendTxData(0x00);
	PORTA.OUTSET = PIN7_bm;
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <__TEXT_REGION_LENGTH__+0x7e0405>
	byte_first &= firstMask; //Limits the value of the byte
 2a8:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <firstMask>
 2ac:	29 23       	and	r18, r25
 2ae:	20 93 1d 42 	sts	0x421D, r18	; 0x80421d <byte_first>
	byte_second &= secondMask; //Limits the value of the byte
 2b2:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2b6:	83 23       	and	r24, r19
 2b8:	80 93 1b 42 	sts	0x421B, r24	; 0x80421b <byte_second>
	uint8_t digitalValue = ((byte_second << 8) | byte_first) >> 4;
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	98 2f       	mov	r25, r24
 2c0:	88 27       	eor	r24, r24
 2c2:	82 2b       	or	r24, r18
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	95 95       	asr	r25
 2ce:	87 95       	ror	r24
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
	//float value = ((float)digitalValue * 5) / 256; //The digital value is converted to an analogue voltage using a VREF of 5V
	UART_sendChar(digitalValue);
 2d4:	0e 94 85 01 	call	0x30a	; 0x30a <UART_sendChar>
 2d8:	08 95       	ret

000002da <UART_init>:
 2da:	e0 e8       	ldi	r30, 0x80	; 128
 2dc:	f4 e0       	ldi	r31, 0x04	; 4
 2de:	80 81       	ld	r24, Z
 2e0:	8d 7f       	andi	r24, 0xFD	; 253
 2e2:	80 83       	st	Z, r24
 2e4:	80 81       	ld	r24, Z
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	80 83       	st	Z, r24
 2ea:	e0 e8       	ldi	r30, 0x80	; 128
 2ec:	f8 e0       	ldi	r31, 0x08	; 8
 2ee:	83 e8       	ldi	r24, 0x83	; 131
 2f0:	96 e0       	ldi	r25, 0x06	; 6
 2f2:	80 87       	std	Z+8, r24	; 0x08
 2f4:	91 87       	std	Z+9, r25	; 0x09
 2f6:	85 81       	ldd	r24, Z+5	; 0x05
 2f8:	80 68       	ori	r24, 0x80	; 128
 2fa:	85 83       	std	Z+5, r24	; 0x05
 2fc:	86 81       	ldd	r24, Z+6	; 0x06
 2fe:	80 6c       	ori	r24, 0xC0	; 192
 300:	86 83       	std	Z+6, r24	; 0x06
 302:	87 81       	ldd	r24, Z+7	; 0x07
 304:	83 60       	ori	r24, 0x03	; 3
 306:	87 83       	std	Z+7, r24	; 0x07
 308:	08 95       	ret

0000030a <UART_sendChar>:
 30a:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 30e:	95 ff       	sbrs	r25, 5
 310:	fc cf       	rjmp	.-8      	; 0x30a <UART_sendChar>
 312:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
 316:	08 95       	ret

00000318 <UART_sendString>:
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	8c 01       	movw	r16, r24
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	d0 e0       	ldi	r29, 0x00	; 0
 326:	07 c0       	rjmp	.+14     	; 0x336 <UART_sendString+0x1e>
 328:	f8 01       	movw	r30, r16
 32a:	ec 0f       	add	r30, r28
 32c:	fd 1f       	adc	r31, r29
 32e:	80 81       	ld	r24, Z
 330:	0e 94 85 01 	call	0x30a	; 0x30a <UART_sendChar>
 334:	21 96       	adiw	r28, 0x01	; 1
 336:	f8 01       	movw	r30, r16
 338:	01 90       	ld	r0, Z+
 33a:	00 20       	and	r0, r0
 33c:	e9 f7       	brne	.-6      	; 0x338 <UART_sendString+0x20>
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	e0 1b       	sub	r30, r16
 342:	f1 0b       	sbc	r31, r17
 344:	ce 17       	cp	r28, r30
 346:	df 07       	cpc	r29, r31
 348:	78 f3       	brcs	.-34     	; 0x328 <UART_sendString+0x10>
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <UART_rx_get_c>:
 354:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 358:	88 23       	and	r24, r24
 35a:	e4 f7       	brge	.-8      	; 0x354 <UART_rx_get_c>
 35c:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
 360:	08 95       	ret

00000362 <uart_com_routine>:
 362:	64 e0       	ldi	r22, 0x04	; 4
 364:	70 e4       	ldi	r23, 0x40	; 64
 366:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <strcmp>
 36a:	89 2b       	or	r24, r25
 36c:	21 f4       	brne	.+8      	; 0x376 <uart_com_routine+0x14>
 36e:	89 e0       	ldi	r24, 0x09	; 9
 370:	90 e4       	ldi	r25, 0x40	; 64
 372:	0e 94 8c 01 	call	0x318	; 0x318 <UART_sendString>
 376:	08 95       	ret

00000378 <strtok>:
 378:	48 e1       	ldi	r20, 0x18	; 24
 37a:	50 e4       	ldi	r21, 0x40	; 64
 37c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <strtok_r>

00000380 <memcpy>:
 380:	fb 01       	movw	r30, r22
 382:	dc 01       	movw	r26, r24
 384:	02 c0       	rjmp	.+4      	; 0x38a <memcpy+0xa>
 386:	01 90       	ld	r0, Z+
 388:	0d 92       	st	X+, r0
 38a:	41 50       	subi	r20, 0x01	; 1
 38c:	50 40       	sbci	r21, 0x00	; 0
 38e:	d8 f7       	brcc	.-10     	; 0x386 <memcpy+0x6>
 390:	08 95       	ret

00000392 <memset>:
 392:	dc 01       	movw	r26, r24
 394:	01 c0       	rjmp	.+2      	; 0x398 <memset+0x6>
 396:	6d 93       	st	X+, r22
 398:	41 50       	subi	r20, 0x01	; 1
 39a:	50 40       	sbci	r21, 0x00	; 0
 39c:	e0 f7       	brcc	.-8      	; 0x396 <memset+0x4>
 39e:	08 95       	ret

000003a0 <strcmp>:
 3a0:	fb 01       	movw	r30, r22
 3a2:	dc 01       	movw	r26, r24
 3a4:	8d 91       	ld	r24, X+
 3a6:	01 90       	ld	r0, Z+
 3a8:	80 19       	sub	r24, r0
 3aa:	01 10       	cpse	r0, r1
 3ac:	d9 f3       	breq	.-10     	; 0x3a4 <strcmp+0x4>
 3ae:	99 0b       	sbc	r25, r25
 3b0:	08 95       	ret

000003b2 <strtok_r>:
 3b2:	fa 01       	movw	r30, r20
 3b4:	a1 91       	ld	r26, Z+
 3b6:	b0 81       	ld	r27, Z
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	19 f4       	brne	.+6      	; 0x3c2 <strtok_r+0x10>
 3bc:	10 97       	sbiw	r26, 0x00	; 0
 3be:	e1 f0       	breq	.+56     	; 0x3f8 <strtok_r+0x46>
 3c0:	cd 01       	movw	r24, r26
 3c2:	dc 01       	movw	r26, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	0d 90       	ld	r0, X+
 3c8:	00 20       	and	r0, r0
 3ca:	11 f4       	brne	.+4      	; 0x3d0 <strtok_r+0x1e>
 3cc:	c0 01       	movw	r24, r0
 3ce:	13 c0       	rjmp	.+38     	; 0x3f6 <strtok_r+0x44>
 3d0:	fb 01       	movw	r30, r22
 3d2:	21 91       	ld	r18, Z+
 3d4:	22 23       	and	r18, r18
 3d6:	19 f0       	breq	.+6      	; 0x3de <strtok_r+0x2c>
 3d8:	20 15       	cp	r18, r0
 3da:	d9 f7       	brne	.-10     	; 0x3d2 <strtok_r+0x20>
 3dc:	f3 cf       	rjmp	.-26     	; 0x3c4 <strtok_r+0x12>
 3de:	fb 01       	movw	r30, r22
 3e0:	21 91       	ld	r18, Z+
 3e2:	20 15       	cp	r18, r0
 3e4:	19 f4       	brne	.+6      	; 0x3ec <strtok_r+0x3a>
 3e6:	1e 92       	st	-X, r1
 3e8:	11 96       	adiw	r26, 0x01	; 1
 3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <strtok_r+0x46>
 3ec:	22 23       	and	r18, r18
 3ee:	c1 f7       	brne	.-16     	; 0x3e0 <strtok_r+0x2e>
 3f0:	0d 90       	ld	r0, X+
 3f2:	00 20       	and	r0, r0
 3f4:	a1 f7       	brne	.-24     	; 0x3de <strtok_r+0x2c>
 3f6:	d0 01       	movw	r26, r0
 3f8:	fa 01       	movw	r30, r20
 3fa:	a1 93       	st	Z+, r26
 3fc:	b0 83       	st	Z, r27
 3fe:	08 95       	ret

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
