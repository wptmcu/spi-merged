
spi_merged.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00804000  000003d4  00000468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000203  0080401c  0080401c  00000484  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ca2  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000309d  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074c  00000000  00000000  000072cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00007a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c9  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000032d  00000000  00000000  00009469  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00009796  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_20>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_56>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e4 ed       	ldi	r30, 0xD4	; 212
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ac 31       	cpi	r26, 0x1C	; 28
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	22 e4       	ldi	r18, 0x42	; 66
 11c:	ac e1       	ldi	r26, 0x1C	; 28
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	af 31       	cpi	r26, 0x1F	; 31
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
 12e:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <main>:



int main(void)
{
	PORTB.DIR |= 0x01;
 136:	e0 e2       	ldi	r30, 0x20	; 32
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
	PORTB.OUT |= 0x01;
 140:	84 81       	ldd	r24, Z+4	; 0x04
 142:	81 60       	ori	r24, 0x01	; 1
 144:	84 83       	std	Z+4, r24	; 0x04
	SPI_init();
 146:	0e 94 38 01 	call	0x270	; 0x270 <SPI_init>
	UART_init();
 14a:	0e 94 55 01 	call	0x2aa	; 0x2aa <UART_init>
	UART_sendString("serial\r\n");
 14e:	82 e1       	ldi	r24, 0x12	; 18
 150:	90 e4       	ldi	r25, 0x40	; 64
 152:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_sendString>
	sei();
 156:	78 94       	sei
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0x22>

0000015a <__vector_56>:
	{
	}
}

ISR(USART4_RXC_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	char data = UART_rx_get_c();
 184:	0e 94 92 01 	call	0x324	; 0x324 <UART_rx_get_c>
	if(uart_read_length < uart_receive_buf_size)
	{
		uart_receive_buf[uart_read_length++] = data;
 188:	e0 91 1e 40 	lds	r30, 0x401E	; 0x80401e <uart_read_length>
 18c:	c1 e0       	ldi	r28, 0x01	; 1
 18e:	ce 0f       	add	r28, r30
 190:	c0 93 1e 40 	sts	0x401E, r28	; 0x80401e <uart_read_length>
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	e1 5e       	subi	r30, 0xE1	; 225
 198:	ff 4b       	sbci	r31, 0xBF	; 191
 19a:	80 83       	st	Z, r24
		if (data == '\0')
 19c:	81 11       	cpse	r24, r1
 19e:	22 c0       	rjmp	.+68     	; 0x1e4 <__vector_56+0x8a>
		{
			memcpy(uart_read_data, uart_receive_buf, uart_read_length);
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	ae 01       	movw	r20, r28
 1a4:	6f e1       	ldi	r22, 0x1F	; 31
 1a6:	70 e4       	ldi	r23, 0x40	; 64
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	91 e4       	ldi	r25, 0x41	; 65
 1ac:	0e 94 a8 01 	call	0x350	; 0x350 <memcpy>
			memset(uart_receive_buf,0,uart_read_length);
 1b0:	ae 01       	movw	r20, r28
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	90 e4       	ldi	r25, 0x40	; 64
 1ba:	0e 94 b1 01 	call	0x362	; 0x362 <memset>
			uart_read_length = 0;
 1be:	10 92 1e 40 	sts	0x401E, r1	; 0x80401e <uart_read_length>
			
			char* read_com = strtok((char*)uart_read_data," ");
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e4       	ldi	r23, 0x40	; 64
 1c6:	8f e1       	ldi	r24, 0x1F	; 31
 1c8:	91 e4       	ldi	r25, 0x41	; 65
 1ca:	0e 94 a4 01 	call	0x348	; 0x348 <strtok>
 1ce:	ec 01       	movw	r28, r24
			char* read_val = strtok(NULL, " ");
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e4       	ldi	r23, 0x40	; 64
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 a4 01 	call	0x348	; 0x348 <strtok>
			
			uart_com_routine(read_com, read_val);
 1dc:	bc 01       	movw	r22, r24
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 99 01 	call	0x332	; 0x332 <uart_com_routine>
		}
	}
}
 1e4:	ff 91       	pop	r31
 1e6:	ef 91       	pop	r30
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0b be       	out	0x3b, r0	; 59
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__vector_20>:


ISR(SPI0_INT_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0b b6       	in	r0, 0x3b	; 59
 21a:	0f 92       	push	r0
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	UART_sendChar("qwer");
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	90 e4       	ldi	r25, 0x40	; 64
 238:	0e 94 6d 01 	call	0x2da	; 0x2da <UART_sendChar>
	uint8_t received_byte = SPI0_GetRxData();
 23c:	0e 94 4e 01 	call	0x29c	; 0x29c <SPI0_GetRxData>
	SPI0.INTFLAGS = SPI_RXCIF_bm;
 240:	90 e8       	ldi	r25, 0x80	; 128
 242:	90 93 43 09 	sts	0x0943, r25	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
	UART_sendChar(received_byte);
 246:	0e 94 6d 01 	call	0x2da	; 0x2da <UART_sendChar>
	received_byte = 0;
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0b be       	out	0x3b, r0	; 59
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <SPI_init>:
// 	SPI0.CTRLB |=	0b10000010;	
// 	SPI0.INTCTRL |=	0b10000001;
// 	SPI0.INTFLAGS |= 0x00;
	
	
	PORTA.DIRSET |= PIN5_bm|PIN6_bm|PIN7_bm;
 270:	e0 e0       	ldi	r30, 0x00	; 0
 272:	f4 e0       	ldi	r31, 0x04	; 4
 274:	81 81       	ldd	r24, Z+1	; 0x01
 276:	80 6e       	ori	r24, 0xE0	; 224
 278:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET |= PIN7_bm;
 27a:	85 81       	ldd	r24, Z+5	; 0x05
 27c:	80 68       	ori	r24, 0x80	; 128
 27e:	85 83       	std	Z+5, r24	; 0x05
	SPI0.CTRLA |=	SPI_MASTER_bm|SPI_ENABLE_bm;
 280:	e0 e4       	ldi	r30, 0x40	; 64
 282:	f9 e0       	ldi	r31, 0x09	; 9
 284:	80 81       	ld	r24, Z
 286:	81 62       	ori	r24, 0x21	; 33
 288:	80 83       	st	Z, r24
	SPI0.CTRLB |=	0b10000010;
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	82 68       	ori	r24, 0x82	; 130
 28e:	81 83       	std	Z+1, r24	; 0x01
	SPI0.INTCTRL |=	0b10000001;
 290:	82 81       	ldd	r24, Z+2	; 0x02
 292:	81 68       	ori	r24, 0x81	; 129
 294:	82 83       	std	Z+2, r24	; 0x02
	SPI0.INTFLAGS |= 0x00;
 296:	83 81       	ldd	r24, Z+3	; 0x03
 298:	83 83       	std	Z+3, r24	; 0x03
 29a:	08 95       	ret

0000029c <SPI0_GetRxData>:
}

uint8_t SPI0_GetRxData()
{
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
 29c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 2a0:	88 23       	and	r24, r24
 2a2:	e4 f7       	brge	.-8      	; 0x29c <SPI0_GetRxData>
	;
	return SPI0.DATA;
 2a4:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 2a8:	08 95       	ret

000002aa <UART_init>:
unsigned char uart_receive_buf[uart_receive_buf_size];
unsigned char uart_read_data[uart_receive_buf_size];

void UART_init(void)
{
	PORTE.DIR &= ~PIN1_bm;
 2aa:	e0 e8       	ldi	r30, 0x80	; 128
 2ac:	f4 e0       	ldi	r31, 0x04	; 4
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
	PORTE.DIR |= PIN0_bm;
 2b4:	80 81       	ld	r24, Z
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	80 83       	st	Z, r24
	//UART register
	USART4.BAUD = (uint16_t)USART4_BAUD_RATE(9600);
 2ba:	e0 e8       	ldi	r30, 0x80	; 128
 2bc:	f8 e0       	ldi	r31, 0x08	; 8
 2be:	83 e8       	ldi	r24, 0x83	; 131
 2c0:	96 e0       	ldi	r25, 0x06	; 6
 2c2:	80 87       	std	Z+8, r24	; 0x08
 2c4:	91 87       	std	Z+9, r25	; 0x09
	USART4.CTRLA |= USART_RXCIE_bm;
 2c6:	85 81       	ldd	r24, Z+5	; 0x05
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	85 83       	std	Z+5, r24	; 0x05
	USART4.CTRLB |= USART_TXEN_bm | USART_RXEN_bm;
 2cc:	86 81       	ldd	r24, Z+6	; 0x06
 2ce:	80 6c       	ori	r24, 0xC0	; 192
 2d0:	86 83       	std	Z+6, r24	; 0x06
	USART4.CTRLC |= USART_CHSIZE1_bm | USART_CHSIZE0_bm;
 2d2:	87 81       	ldd	r24, Z+7	; 0x07
 2d4:	83 60       	ori	r24, 0x03	; 3
 2d6:	87 83       	std	Z+7, r24	; 0x07
 2d8:	08 95       	ret

000002da <UART_sendChar>:
}

void UART_sendChar(char c)
{
	while (!(USART4.STATUS & USART_DREIF_bm))
 2da:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 2de:	95 ff       	sbrs	r25, 5
 2e0:	fc cf       	rjmp	.-8      	; 0x2da <UART_sendChar>
	{
		;
	}
	USART4.TXDATAL = c;
 2e2:	80 93 82 08 	sts	0x0882, r24	; 0x800882 <__TEXT_REGION_LENGTH__+0x7e0882>
 2e6:	08 95       	ret

000002e8 <UART_sendString>:
}


void UART_sendString(char *str)
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <UART_sendString+0x1e>
	{
		UART_sendChar(str[i]);
 2f8:	f8 01       	movw	r30, r16
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	80 81       	ld	r24, Z
 300:	0e 94 6d 01 	call	0x2da	; 0x2da <UART_sendChar>
}


void UART_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	f8 01       	movw	r30, r16
 308:	01 90       	ld	r0, Z+
 30a:	00 20       	and	r0, r0
 30c:	e9 f7       	brne	.-6      	; 0x308 <UART_sendString+0x20>
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	e0 1b       	sub	r30, r16
 312:	f1 0b       	sbc	r31, r17
 314:	ce 17       	cp	r28, r30
 316:	df 07       	cpc	r29, r31
 318:	78 f3       	brcs	.-34     	; 0x2f8 <UART_sendString+0x10>
	{
		UART_sendChar(str[i]);
	}
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <UART_rx_get_c>:

uint8_t UART_rx_get_c()
{
	while(!(USART4.STATUS & USART_RXCIF_bm))
 324:	80 91 84 08 	lds	r24, 0x0884	; 0x800884 <__TEXT_REGION_LENGTH__+0x7e0884>
 328:	88 23       	and	r24, r24
 32a:	e4 f7       	brge	.-8      	; 0x324 <UART_rx_get_c>
	;
	return USART4.RXDATAL;
 32c:	80 91 80 08 	lds	r24, 0x0880	; 0x800880 <__TEXT_REGION_LENGTH__+0x7e0880>
}
 330:	08 95       	ret

00000332 <uart_com_routine>:

void uart_com_routine(char* u_com, char* read_val)
{
	if(!strcmp(u_com, "uart"))
 332:	67 e0       	ldi	r22, 0x07	; 7
 334:	70 e4       	ldi	r23, 0x40	; 64
 336:	0e 94 b8 01 	call	0x370	; 0x370 <strcmp>
 33a:	89 2b       	or	r24, r25
 33c:	21 f4       	brne	.+8      	; 0x346 <uart_com_routine+0x14>
	{
		UART_sendString("uart4 serial\r\n");
 33e:	8c e0       	ldi	r24, 0x0C	; 12
 340:	90 e4       	ldi	r25, 0x40	; 64
 342:	0e 94 74 01 	call	0x2e8	; 0x2e8 <UART_sendString>
 346:	08 95       	ret

00000348 <strtok>:
 348:	4c e1       	ldi	r20, 0x1C	; 28
 34a:	50 e4       	ldi	r21, 0x40	; 64
 34c:	0c 94 c1 01 	jmp	0x382	; 0x382 <strtok_r>

00000350 <memcpy>:
 350:	fb 01       	movw	r30, r22
 352:	dc 01       	movw	r26, r24
 354:	02 c0       	rjmp	.+4      	; 0x35a <memcpy+0xa>
 356:	01 90       	ld	r0, Z+
 358:	0d 92       	st	X+, r0
 35a:	41 50       	subi	r20, 0x01	; 1
 35c:	50 40       	sbci	r21, 0x00	; 0
 35e:	d8 f7       	brcc	.-10     	; 0x356 <memcpy+0x6>
 360:	08 95       	ret

00000362 <memset>:
 362:	dc 01       	movw	r26, r24
 364:	01 c0       	rjmp	.+2      	; 0x368 <memset+0x6>
 366:	6d 93       	st	X+, r22
 368:	41 50       	subi	r20, 0x01	; 1
 36a:	50 40       	sbci	r21, 0x00	; 0
 36c:	e0 f7       	brcc	.-8      	; 0x366 <memset+0x4>
 36e:	08 95       	ret

00000370 <strcmp>:
 370:	fb 01       	movw	r30, r22
 372:	dc 01       	movw	r26, r24
 374:	8d 91       	ld	r24, X+
 376:	01 90       	ld	r0, Z+
 378:	80 19       	sub	r24, r0
 37a:	01 10       	cpse	r0, r1
 37c:	d9 f3       	breq	.-10     	; 0x374 <strcmp+0x4>
 37e:	99 0b       	sbc	r25, r25
 380:	08 95       	ret

00000382 <strtok_r>:
 382:	fa 01       	movw	r30, r20
 384:	a1 91       	ld	r26, Z+
 386:	b0 81       	ld	r27, Z
 388:	00 97       	sbiw	r24, 0x00	; 0
 38a:	19 f4       	brne	.+6      	; 0x392 <strtok_r+0x10>
 38c:	10 97       	sbiw	r26, 0x00	; 0
 38e:	e1 f0       	breq	.+56     	; 0x3c8 <strtok_r+0x46>
 390:	cd 01       	movw	r24, r26
 392:	dc 01       	movw	r26, r24
 394:	cd 01       	movw	r24, r26
 396:	0d 90       	ld	r0, X+
 398:	00 20       	and	r0, r0
 39a:	11 f4       	brne	.+4      	; 0x3a0 <strtok_r+0x1e>
 39c:	c0 01       	movw	r24, r0
 39e:	13 c0       	rjmp	.+38     	; 0x3c6 <strtok_r+0x44>
 3a0:	fb 01       	movw	r30, r22
 3a2:	21 91       	ld	r18, Z+
 3a4:	22 23       	and	r18, r18
 3a6:	19 f0       	breq	.+6      	; 0x3ae <strtok_r+0x2c>
 3a8:	20 15       	cp	r18, r0
 3aa:	d9 f7       	brne	.-10     	; 0x3a2 <strtok_r+0x20>
 3ac:	f3 cf       	rjmp	.-26     	; 0x394 <strtok_r+0x12>
 3ae:	fb 01       	movw	r30, r22
 3b0:	21 91       	ld	r18, Z+
 3b2:	20 15       	cp	r18, r0
 3b4:	19 f4       	brne	.+6      	; 0x3bc <strtok_r+0x3a>
 3b6:	1e 92       	st	-X, r1
 3b8:	11 96       	adiw	r26, 0x01	; 1
 3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <strtok_r+0x46>
 3bc:	22 23       	and	r18, r18
 3be:	c1 f7       	brne	.-16     	; 0x3b0 <strtok_r+0x2e>
 3c0:	0d 90       	ld	r0, X+
 3c2:	00 20       	and	r0, r0
 3c4:	a1 f7       	brne	.-24     	; 0x3ae <strtok_r+0x2c>
 3c6:	d0 01       	movw	r26, r0
 3c8:	fa 01       	movw	r30, r20
 3ca:	a1 93       	st	Z+, r26
 3cc:	b0 83       	st	Z, r27
 3ce:	08 95       	ret

000003d0 <_exit>:
 3d0:	f8 94       	cli

000003d2 <__stop_program>:
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <__stop_program>
